#https://docs.microsoft.com/en-us/learn/modules/intro-to-containers/4-create-custom-docker-image

#DockerFile
FROM mcr.microsoft.com/dotnet/core/sdk:2.2
WORKDIR /app
COPY myapp_code .
RUN dotnet build -c Release -o /rel
EXPOSE 80
WORKDIR /rel
ENTRYPOINT ["dotnet", "myapp.dll"]

#In this file:
#The FROM statement downloads the specified image and creates a new container based on this image.
#The WORKDIR command sets the current working directory in the container, used by the following commands.
#The COPY command copies files from the host computer to the container. The first argument (myapp_code) is a file or folder on the host computer. The second argument (.) specifies the name of the file or folder to act as the destination in the container. In this case, the destination is the current working directory (/app).
#The RUN command executes a command in the container. Arguments to the RUN command are command-line commands.
#The EXPOSE command creates configuration in the new image that specifies which ports are intended to be opened when the container is run. If the container is running a web app, it's common to EXPOSE port 80.
#The ENTRYPOINT command specifies the operation the container should run when it starts. In this example, it runs the newly built app. You specify the command to be run and each of its arguments as a string array.

#By convention, applications meant to be packaged as Docker images typically have a Dockerfile located in the root of their source code, and it's almost always named Dockerfile.
#The docker build command creates a new image by running a Dockerfile. The -f flag indicates the name of the Dockerfile to use. The -t flag specifies the name of the image to be created, in this example, myapp:v1. The final parameter, ., provides the build context for the source files for the COPY command: the set of files on the host computer needed during the build process.




#buildthedockerfile

docker build -t myapp:v1 .

#Behind the scenes, the docker build command creates and runs a container, runs commands in it, then commits the changes to a new image.

